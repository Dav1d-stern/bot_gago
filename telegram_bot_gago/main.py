import telebot
import sqlite3 as sql
import threading
import time


import sys
import logging

logging.basicConfig(
    filename="error.log", encoding="utf-8", level=logging.ERROR
)
logger = logging.getLogger(__name__)
handler = logging.StreamHandler(stream=sys.stdout)
logger.addHandler(handler)


def handle_exception(exc_type, exc_value, exc_traceback):
    logger.error(
        "Uncaught exception", exc_info=(exc_type, exc_value, exc_traceback)
    )


sys.excepthook = handle_exception


#ะะฐะทะฐ ะะฐะฝะฝัั
con = sql.connect("data.db", check_same_thread=False)
cur = con.cursor()
cur.execute("CREATE TABLE IF NOT EXISTS users(id INTEGER PRIMARY KEY AUTOINCREMENT, first_name TEXT, last_name TEXT, phone_number TEXT)")


first_name = None 
last_name = None
phone_number = None
users = None
#fiFILE_PATHle
LinkVideo = "https://www.youtube.com/watch?si=j88qE9HpftDIjsau&v=SyMQpGFc8pY&feature=youtu.be"
message_copy = None

#ะะฐั ะฑะพั
token = "6488193207:AAE4RCqR_mBiRriXdoo_SaK83QRRuz9PMq8"
bot = telebot.TeleBot(token)

#ID ะะฐัะตะณะพ ะบะฐะฝะฐะปะฐ
chan_id = "-1002107143246"
LINK = "https://t.me/GagikMnatsakanyan"

#ะะปะฐะฒะธะฐัััะฐ ะดะปั ะฟัะพะฒะตัะบะธ ะฟะพะดะฟะธัะบะธ
keyboard = telebot.types.InlineKeyboardMarkup()
subscribe = telebot.types.InlineKeyboardButton(text="ีีซีกีถีกีฌ", url=LINK)
check = telebot.types.InlineKeyboardButton(text="ีีฟีกีถีกีฌ", callback_data="check")
details = telebot.types.InlineKeyboardButton(text="ีีกีถึีกีดีกีฝีถีฅึ", callback_data="details")
continuee = telebot.types.InlineKeyboardButton(text="ีีกึีธึีถีกีฏีฅีฌ", callback_data="continuee")
opinions = telebot.types.InlineKeyboardButton(text="ิฟีกึีฎีซึีถีฅึ", callback_data="opinions") 
keyboard.add(subscribe)
keyboard.add(check)

detail_mk = telebot.types.InlineKeyboardMarkup()
details = telebot.types.InlineKeyboardButton(text="ีดีกีถึีกีดีกีฝีถีฅึ", callback_data="details")
detail_mk.add(details)

continuee_mk = telebot.types.InlineKeyboardMarkup()
continuee = telebot.types.InlineKeyboardButton(text="ีทีกึีธึีถีกีฏีฅีฌ", callback_data="continuee")
continuee_mk.add(continuee)

opinions_mk = telebot.types.InlineKeyboardMarkup()
opinions = telebot.types.InlineKeyboardButton(text="ิฟีกึีฎีซึีถีฅึ", callback_data="opinions")
opinions_mk.add(opinions)

know_lesson_mk = telebot.types.InlineKeyboardMarkup()
know_lesson = telebot.types.InlineKeyboardButton(text="ิปีดีกีถีกีฌ ีคีกีฝีจีถีฉีกึีซ ีดีกีฝีซีถ", callback_data="know_lesson")
know_lesson_mk.add(know_lesson)

lesson_mk = telebot.types.InlineKeyboardMarkup()
lesson = telebot.types.InlineKeyboardButton(text="ีทีกึีธึีถีกีฏีฅีฌ", callback_data="lesson")
lesson_mk.add(lesson)

possibility_mk = telebot.types.InlineKeyboardMarkup()
possibility = telebot.types.InlineKeyboardButton(text="ีทีกึีธึีถีกีฏีฅีฌ", callback_data="possibility")
possibility_mk.add(possibility)

end_lesson_mk = telebot.types.InlineKeyboardMarkup()
end_lesson = telebot.types.InlineKeyboardButton(text="ีทีกึีธึีถีกีฏีฅีฌ", callback_data="end_lesson")
end_lesson_mk.add(end_lesson)

price_lesson_mk = telebot.types.InlineKeyboardMarkup()
price_lesson = telebot.types.InlineKeyboardButton(text="ีฐีกีฟีธึีฏ ีกีผีกีปีกึีฏ", callback_data="price_lesson")
price_lesson_mk.add(price_lesson)


register_mk = telebot.types.InlineKeyboardMarkup()
register = telebot.types.InlineKeyboardButton(text="ีฃึีกีถึีพีฅีฌ", callback_data="register")
register_mk.add(register)



@bot.message_handler(commands=["start"])
def start(message):
    global message_copy
    message_copy = message
    
    if users == None: #ะัะปะธ ัะทะตั ะตัั ะฝะต ะฒ ะะ
        try:
            bot.send_message(message.chat.id, f"""ีีฒีปีธึีตีถ, {message.from_user.first_name} ๐๏ธ

โ๏ธีพีซีคีฅีธีคีกีฝีจ ีฐีกีฝีกีถีฅีฌีซ ีง ีดีซีกีตีถ ีซีด ีฟีฅีฌีฅีฃึีกีด ีกีฌีซึีซ ีฐีฅีฟึีธึีคีถีฅึีซีถ

ิธีถีคีกีดีฅีถีจ ีดีฅีฏ ึีกีตีฌ, ีดีซีกึีฅึ ีกีฌีซึีซีถ ึ ีกีถีดีซีปีกีบีฅีฝ ีฏีฝีฟีกีถีกึ ีพีซีคีฅีธีคีกีฝีจ""", reply_markup=keyboard)
        
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"ะัะธะฑะบะฐ ะฟัะธ starte {e}")
  


def send_delayed_message(chat_id, message, delay=5, reply_markup=None):
    """ะัะฟัะฐะฒะปัะตั ะทะฐะดะตัะถะฐะฝะฝะพะต ัะพะพะฑัะตะฝะธะต ั ะทะฐะดะตัะถะบะพะน."""
    def task():
        time.sleep(delay)  # ะะฐะดะตัะถะบะฐ
        try:
            bot.send_message(chat_id, message, reply_markup=reply_markup)
        except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"ะัะธะฑะบะฐ ะฟัะธ ะพัะฟัะฐะฒะบะต ะทะฐะดะตัะถะฐะฝะฝะพะณะพ ัะพะพะฑัะตะฝะธั: {e}")

    thread = threading.Thread(target=task)
    thread.start()



@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    global message_copy
    try:
        if call.data == "check":
                x = bot.get_chat_member(chan_id, call.message.chat.id)
                if x.status == "member" or x.status == "creator" or x.status == "administrator":
                    bot.send_message(call.message.chat.id, "ิฒีกึีซ ีฃีกีฌีธึีฝีฟ!")
                    # bot.send_document(call.message.chat.id, document=open(LinkVideo, 'rb'))
                    bot.send_message(call.message.chat.id, LinkVideo)
                    send_delayed_message(call.message.chat.id, f"""
                                        ีีซึีฅีฌีซ {message_copy.from_user.first_name} ีกีตีชีด ีคีธึึ ีฃีซีฟีฅึ ีซีถีนีบีฅีฝ ีฅีถ ีกีทีญีกีฟีธึีด ีซีถีฝีฟีกีฃึีกีดีซ ีกีฌีฃีธึีซีฉีดีถีฅึีจ ึีซีฌีฝีฅึีซ ีพึีก

โ๏ธิฒีกีตึ ีบึีธึีฅีฝีซีธีถีกีฌ ึีซีฌีฝีฅึ ีฝีฟีกีถีกีฌีธึ ีฐีกีดีกึ, ีฑีฅีฆ ีญีธึีจ ีบึีกีฏีฟีซีฏีก ีง ีฐีกึีฏีกีพีธึ ๐ฅ

โ๏ธ ิตีฝ ีฏีฝีธีพีธึีฅึีถีฅีด ีฑีฅีฆ ีถีฏีกึีกีฐีกีถีฅีฌ ึีซีฌีฝีฅึ ึ ีฏีกีฆีดีฅีฌ ีงีปีซ ีกีตีถีบีซีฝีซ ีพีซีฆีธึีกีฌ, ีธึีจ ีฏีฆีกึีดีกึีถีซ ีขีธีฌีธึีซีถ

ยซ ีคีธึึ ีซีถึีถีฅึีค ีฏีฆีกึีดีกีถีกึ ีฑีฅึ ีถีฏีกึีกีฐีกีถีกีฎ ึีซีฌีฝีฅึีซ ึ ีฏีกีฆีดีกีฎ ีพีซีฆีธึีกีฌีซ ีพึีก ยป

ิดีธึึ ีฏีฝีธีพีธึีฅึ ีกีตีฝ ีกีดีฅีถีจ, ีขีกีตึ ีถีกีญ ีดีซ ึีธึึ ีถีฅึีกีฎีธึีฉีตีธึีถ

๐ ีีฅีฒีดีฅึ ีฝีฟีธึีซีถ ีฏีธีณีกีฏีจ
                                                            """, delay=271, reply_markup=detail_mk)


                else:
                    bot.send_message(call.message.chat.id, "ิดีธึึ ีขีกีชีกีถีธึีคีกีฃึีพีกีฎ ีนีฅึ!")
        elif call.data == 'details':
            bot.send_message(call.message.chat.id, f"""ิตีฝ ิณีกีฃีซีฏ ีีถีกึีกีฏีกีถีตีกีถีถ ีฅีดึ
ิตีฝ ีบึีธึีฅีฝีซีธีถีกีฌ ีดีกึึีฅีฉีธีฌีธีฃ ีฅีด, ีธีพ ีญีธึีกีบีฅีฝ ีฆีขีกีฒีพีธึีด ีง SMM - ีธีพ

SMM - ีจ ีฏีกึีณ ีชีกีดีกีถีกีฏีกีฐีกีฟีพีกีฎีธึีด ึีธีญีฅึ ีซีด ีฏีตีกีถึีจ ึ ีกีตีฝึึ โ ีนีฅีด ีฏีกึีธีฒ ีบีกีฟีฏีฅึีกึีถีฅีฌ ีฐีฅีฟีกีฃีก ีฏีตีกีถึีฝ, ีกีผีกีถึ ีซีด ีฝีซึีกีฎ ีกีทีญีกีฟีกีถึีซ

โ ิตีฝ ีฐีกีดีธีฆีพีฅึีซ, ีธึ ึีกีถีฏีธึีฉีตีกีถ ีคีฅีบึีธึีด ีกีดีฝีกีฏีกีถ 200 ีฐีกีฆีกึีจ, ีฏีกึีฅีฌีซ ีง ีคีกึีฑีถีฅีฌ 2 ีดีฌีถ, SMM - ีซ ีทีถีธึีฐีซีพ

๐ฑ ึ ีถึีกีถึ ีธีพึีฅึ ีกีตีฝึึ ีขีกึ ีฅีถ ีฉีธีฒีถีธึีด ีฝีธีพีธึีฅีฌีธึ ีฐีถีกึีกีพีธึีธึีฉีตีธึีถีจ, ีพีกีฒีจ ีทีกีฟ ีฅีถ ีกึีฝีธีฝีฅีฌีธึ

ิปีด ีธึีฝีกีถีธีฒีถีฅึีจ ีกีทีญีกึีฐีซ ีฟีกึีขีฅึ ีฎีกีตึีฅึีธึีด ีฃีฟีถีพีธีฒ ีฐีกีตีฅึีถ ีฅีถ, ีกีตีค ีฉีพีธึีด ิฑีี, ีึีซ ิผีกีถีฏีก, ิฒีฅีฌีฃีซีก ึ ีิด

โ๏ธ ิปีด ีฐีซีดีถีกีฎ Full SMM 0-ีซึ ีคีกีฝีจีถีฉีกึีจ ีทีกีฟ ีฌีกีพ ีฐีถีกึีกีพีธึีธึีฉีตีธึีถ ีง ีฑีฅีผึ ีขีฅึีฅีฌ ีคีกึีซ ีกีดีฅีถีกีบีกีฐีกีถีปีพีกีฎ ีดีกีฝีถีกีฃีซีฟีธึีฉีตีธึีถีฅึีซึ ีดีฅีฏีจ

โ๏ธ ิฟีกีด ีฅีฉีฅ ีธึีถีฅึ ีขีซีฆีถีฅีฝ, ีขีกึ ีดีซ ีฉีธีฒีฅึ ีกีตีฝ ีฐีถีกึีกีพีธึีธึีฉีตีธึีถีจ ีฝีฟีฅีฒีฎีฅีฌ ีฏีกีตีธึีถ ีพีกีณีกีผีธีฒ ีงีป ีซีถีฝีฟีกีฃึีกีดีธึีด

โ๏ธ ิปีฝีฏ ีฐีซีดีก ีฏีกึีธีฒ ีฅึ ีฟีฅีฝีถีฅีฌ ีกึีคีฅีถ ีคีกีฝีจีถีฉีกึีถ ีกีพีกึีฟีกีฎ ีธึีฝีกีถีธีฒีถีฅึีซ ีฏีกึีฎีซึีถีฅึีจ

ีีฅีฒีดีฅึ ๐

""", reply_markup=opinions_mk)
        elif call.data == "opinions":
            # ะัะฟัะฐะฒะบะฐ ัะพัะพ
            for i in range(1,7):
                if i >= 6:
                    bot.send_photo(call.message.chat.id, photo=open(f'photo{i}', 'rb'))
                    send_delayed_message(call.message.chat.id, f"""โ๏ธ ีึีกีถึ ีฏีกึีฎีซึีถีฅึีซ ีทีกีฟ ึีธึึ ีดีกีฝีถ ีง, ีดีถีกึีกีฎ ีดีกีฝีธีพ ีฅีฝ ีฏีซีฝีพีฅีฌ ีฅีด ีซีด ีงีปีซ ยซ ีคีกีฝีจีถีฉีกึ ยป ีกีฏีฟีธึีกีฌ ีกีฌีขีธีดีธึีด""", delay=2)
                    send_delayed_message(call.message.chat.id, f"""ิตีฝ ีดีฟีกีฎีฅีฌ ีฅีด ีฑีฅึ ีฐีฅีฟีกีฃีก ีกีทีญีกีฟีกีถึีซ ีฐีกีดีกึ ีคีกีฝีจีถีฉีกึีจ ีกีพีกึีฟีฅีฌีธึึ ีฐีฅีฟีธ

โ ิณีธึึีฅ ีซีถีน-ีธึ ีขีกีถ ีดีธีผีกีถีกึ ึ ีนีฏีกึีธีฒีกีถีกึ ีฃีธึีฎีซ ีคีถีฅีฌ

ิฑีตีค ีบีกีฟีณีกีผีธีพ ีบีกีฟึีกีฝีฟีฅีฌ ีฅีด ีฐีกีพีฅีฌีตีกีฌ ีิปิดิตีิดิฑีิตี

โ ิตีฉีฅ ีฐีฅีฟีกีฃีกีตีธึีด ีซีถีน-ีธึ ีขีกีถ ีดีธีผีกีถีกึ, ีฏีกึีธีฒ ีฅึ ีขีกึีฅีฌ ีกีตีค ีฉีฅีดีกีตีซ ีพีซีคีฅีธีคีกีฝีจ ึ ีพีฅึีฐีซีทีฅีฌ ีฃีซีฟีฅีฌีซึีจ

โ๏ธ ิตีฝ ีฏีฟีกีด ีฑีฅีฆ ีถีกึ ีกีทีญีกีฟีกีถึีกีตีซีถ ีบีธึีฟึีธีฌีซีธ, ีจีฝีฟ ีฑีฅึ ีฏีกีฟีกึีกีฎ ีกีทีญีกีฟีกีถึีถีฅึีซ ีคีกีฝีจีถีฉีกึีซ ีจีถีฉีกึึีธึีด, ีธึีจ ีทีกีฟ ีฏึีฃีถีซ ีดีกีฝีถีกีฃีฅีฟีถีฅึีซีถ ีกีทีญีกีฟีกีถึ ีฃีฟีถีฅีฌีธึ ีฐีกึึีธึีด

ิตี ีกีตีฝ ีบีกีฐีซีถ ีฃีธึีฎีธึีด ีง ีฐีกีฟีธึีฏ ีกีผีกีปีกึีฏ ีคีกีฝีจีถีฉีกึีซ ีฃีถีกีผีกีปีกึีฏีซ ีพีฅึีกีขีฅึีตีกีฌ

๐ ีีฅีฒีดีฅึ ีฝีฟีธึีซีถ ีฏีธีณีกีฏีจ
 """, delay=3, reply_markup=price_lesson_mk)
                else: 
                    bot.send_photo(call.message.chat.id, photo=open(f'photo{i}', 'rb'))

    
    
        elif  call.data == "price_lesson":
            bot.send_message(call.message.chat.id, f"""
ีีีีี ิฟีิด ีิติถ ีิฑีิฑี

ิดีกีฝีจีถีฉีกึีจ ีกึีชีฅ 63 ีฐีฆึ ีคึีกีด, ีขีกีตึ ีกีตีฝ ีบีกีฐีซีถ ีฏีก ีฐีกีฟีธึีฏ ีฃีซีถี ึีฃีฟีกีฃีธึีฎีฅีฌีธีพ LIST ีบึีธีดีธีฏีธีคีจ

๐ฅ ิธีถีคีกีดีฅีถีจ 55 ีฐีฆึ ีคึีกีด SMM ีดีกีฝีถีกีฃีซีฟีธึีฉีตีธึีถ ีฑีฅีผึ ีขีฅึีฅีฌีธึ ีฐีกีดีกึ, ีธึีจ ีฏึีฃีถีซ ีฉีฅ ีฑีฅึ ีขีซีฆีถีฅีฝีซ ีพีกีณีกีผึีถีฅึีจ ีขีกีฆีดีกีบีกีฟีฏีฅีฌ ีซีถีฝีฟีกีฃึีกีดีธึีด, ีฉีฅ ีฑีฅึ ีพีกีณีกีผึีถีฅึีจ ีธึีบีฅีฝ ีดีกีฝีถีกีฃีฅีฟ ( ึีกีถีฏีกึีกีฎ ีธีฌีธึีฟีซ )

โผ๏ธ ิฑีผีกีปีกึีฏีจ ีฝีกีฐีดีกีถีกึีกีฏ ีง ึ ีฏีกึีธีฒ ีง ีฝีกีผีฅึีพีฅีฌ ึีกีถีฏีกึีกีฎ ีบีกีฐีซ

ิณึีกีถึีพีฅีฌีธึ ีฐีกีดีกึ, ีฝีฅีฒีดีฅึ ีกีตีฝีฟีฅีฒ ๐
""", reply_markup=register_mk)
        
        elif  call.data == "register":
            bot.send_message(call.message.chat.id, "ิณึีฅึ ีฑีฅึ ีกีถีธึีถีจ")
            bot.register_next_step_handler(call.message, get_first_name)

    except telebot.apihelper.ApiTelegramException as e:
            logger.error(f"ะัะธะฑะบะฐ ะฟัะธ ะพัะฟัะฐะฒะบะต ัะพัะพ: {e}")

def get_first_name(message):
    global first_name
    try:
        first_name = message.text.strip()
        bot.send_message(message.chat.id, "ิณึีฅึ ีบึีธีดีธีฏีธีคีจ")
        bot.register_next_step_handler(message, get_last_name)
    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"ะัะธะฑะบะฐ ะฟัะธ ะพัะฟัะฐะฒะบะต ะธะผะตะฝะธ: {e}")

def get_last_name(message):
    global last_name
    try:
        last_name = message.text.strip()
        bot.send_message(message.chat.id, "ิณึีฅึ ีฑีฅึ ีฐีฅีผโค ีฐีกีดีกึีจ")
        bot.register_next_step_handler(message, phone)
    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"ะัะธะฑะบะฐ ะฟัะธ ะพัะฟัะฐะฒะบะต ัะฐะผะธะปะธ: {e}")

    


def phone(message):
    global phone_number
    try:
        phone_number = message.text.strip()
        
        conn = sql.connect('data.db')
        cur = conn.cursor()
    
        # ะะฐัะฐะผะตััะธะทะธัะพะฒะฐะฝะฝัะน ะทะฐะฟัะพั ะดะปั ะฟัะตะดะพัะฒัะฐัะตะฝะธั SQL ะธะฝัะตะบัะธะน
        cur.execute("INSERT INTO users (first_name, last_name, phone_number) VALUES (?, ?, ?)", (first_name, last_name, phone_number))
        conn.commit()
    
        cur.execute("SELECT * FROM users ORDER BY id DESC LIMIT 1")
        last_record = cur.fetchone()  # ะะพะปััะฐะตะผ ะฟะพัะปะตะดะฝัั ะทะฐะฟะธัั
    
        # ะะฐะบััะฒะฐะตะผ ะบัััะพั ะธ ัะพะตะดะธะฝะตะฝะธะต
        cur.close()
        conn.close()
    
    # ะัะพะฒะตััะตะผ, ััะพ ะทะฐะฟะธัั ะฝะต ะฟัััะฐั
        if last_record:
            # ะะพะปััะฐะตะผ ะดะฐะฝะฝัะต ะธะท ะฟะพัะปะตะดะฝะตะน ะทะฐะฟะธัะธ

            last_first_name=last_record[1]
            last_last_name=last_record[2]
            last_phone_number=last_record[3]

            # ะัะฟัะฐะฒะปัะตะผ ัะพะพะฑัะตะฝะธะต ั ะดะฐะฝะฝัะผะธ ะฟะพัะปะตะดะฝะตะน ะทะฐะฟะธัะธ ะฒ ะพะฟัะตะดะตะปะตะฝะฝัะน ัะฐั
            bot.send_message("6066680903", f"ีีธึ ีฃึีกีถึีธึีด:\nิฑีถีธึีถ: {last_first_name}\nิฑีฆีฃีกีถีธึีถ: {last_last_name}\nีีฅีผ: {last_phone_number}")
        else:
            # ะัะปะธ ะฑะฐะทะฐ ะดะฐะฝะฝัั ะฟัััะฐ, ะพัะฟัะฐะฒะปัะตะผ ัะพะพะฑัะตะฝะธะต ะพะฑ ััะพะผ
            bot.send_message("6066680903", "ะะฐะทะฐ ะดะฐะฝะฝัั ะฟัััะฐ")


        bot.send_message(message.chat.id, """๐ฅ ิณึีกีถึีธึีดีจ ีฐีกีปีธีฒีธึีฉีตีกีดีข ีฏีกีฟีกึีพีฅึ, ีฅีฝ ีฐีถีกึีกีพีธึีซีถีฝ ีทีธึีฟ ีฏีฏีกีบีพีฅีด ีฑีฅีฆ ีฐีฅีฟ โบ๏ธ""")

    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"ะัะธะฑะบะฐ ะฟัะธ ะพัะฟัะฐะฒะบะต ะฝะพะผะตัะฐ: {e}")




@bot.message_handler()
def get_data(message):
    try:
        if message.text.lower() == "get_all_data":

            conn = sql.connect('data.db')
            cur = conn.cursor()

            cur.execute("SELECT * FROM users")
            users = cur.fetchall()

            info = ''

            for el in users:
                info += f"ิฑีถีธึีถ: {el[1]}, ิฑีฆีฃีกีถีธึีถ: {el[2]}, ีีฅีผ: {el[3]}\n"


            cur.close()
            conn.close()

            bot.send_message(message.chat.id, info)

    except telebot.apihelper.ApiTelegramException as e:
        logger.error(f"ะัะธะฑะบะฐ ะฟัะธ ะพัะฟัะฐะฒะบะต ัะพัะพ: {e}")


if __name__ == "__main__":
    bot.polling()